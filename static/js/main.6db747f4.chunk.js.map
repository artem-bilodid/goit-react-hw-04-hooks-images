{"version":3,"sources":["components/button/button.jsx","components/image-gallery-item/image-gallery-item.jsx","components/modal/modal.jsx","components/image-gallery/image-gallery.jsx","components/loader/loader.jsx","components/search-bar/search-bar.jsx","util/api-client.js","components/app/app.jsx","reportWebVitals.js","index.js"],"names":["Button","onClick","type","className","ImageGalleryItem","id","src","alt","modalRoot","document","getElementById","Modal","handleESCButtonClose","event","code","props","onClose","handleClose","target","currentTarget","window","addEventListener","this","removeEventListener","tags","createPortal","Component","ImageGallery","state","isModalOpen","itemId","adjustScroll","scrollY","prevImages","images","length","scrollTo","top","innerHeight","behavior","toggleModal","setState","handleItemClick","prevProps","prevState","snapshot","modalImage","find","image","Number","imageSrc","largeImageURL","imageTags","galleryItems","map","webformatURL","Loader","color","height","width","timeout","SearchBar","query","handleSubmit","preventDefault","onSubmit","trim","handleChange","value","onChange","autoComplete","autoFocus","placeholder","getImagesResponse","page","a","url","fetch","response","ok","Promise","reject","Error","statusText","json","parsedData","console","log","INITIAL_STATE","totalHits","error","isLoading","App","handleSearchFormSubmit","firstPage","getImages","hits","handleLoadMoreButtonClick","nextPage","concat","shouldShowLoadButton","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6db747f4.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst Button = ({ onClick }) => {\n  return (\n    <button type=\"button\" className=\"Button\" onClick={onClick}>\n      Load more\n    </button>\n  );\n};\n\nButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Button;\n","import PropTypes from 'prop-types';\n\nconst ImageGalleryItem = ({ id, src, alt, onClick }) => {\n  return (\n    <li className=\"ImageGalleryItem\">\n      <img id={id} src={src} alt={alt} onClick={onClick} className=\"ImageGalleryItem-image\" />\n    </li>\n  );\n};\n\nImageGalleryItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default ImageGalleryItem;\n","import { Component } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\n\nconst modalRoot = document.getElementById('modal-root');\n\nclass Modal extends Component {\n  componentDidMount() {\n    window.addEventListener('keydown', this.handleESCButtonClose);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.handleESCButtonClose);\n  }\n\n  handleESCButtonClose = event => {\n    if (event.code !== 'Escape') return;\n    this.props.onClose();\n  };\n\n  handleClose = event => {\n    if (event.target !== event.currentTarget) return;\n    this.props.onClose();\n  };\n\n  render() {\n    const { src, tags } = this.props;\n    return createPortal(\n      <div className=\"Overlay\" onClick={this.handleClose}>\n        <div className=\"Modal\">\n          <img src={src} alt={tags} />\n        </div>\n      </div>,\n      modalRoot,\n    );\n  }\n}\n\nModal.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default Modal;\n","import ImageGalleryItem from '../image-gallery-item';\nimport Modal from '../modal';\nimport { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ImageGallery extends Component {\n  state = {\n    isModalOpen: false,\n    itemId: null,\n  };\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    return { scrollY: window.scrollY };\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    const prevImages = prevProps.images;\n    const { scrollY } = snapshot;\n    const { images } = this.props;\n\n    this.adjustScroll(scrollY, prevImages, images);\n  }\n\n  adjustScroll = (scrollY, prevImages, images) => {\n    if (prevImages.length === 0 || prevImages === images) return;\n\n    if (prevImages.length >= images.length) {\n      window.scrollTo({\n        top: 0,\n      });\n      return;\n    }\n\n    window.scrollTo({\n      top: scrollY + window.innerHeight - 150,\n      behavior: 'smooth',\n    });\n  };\n\n  toggleModal = () => {\n    this.setState(({ isModalOpen }) => ({ isModalOpen: !isModalOpen }));\n  };\n\n  handleItemClick = event => {\n    const { id } = event.currentTarget;\n    this.setState({ itemId: id });\n    this.toggleModal();\n  };\n\n  render() {\n    const { images } = this.props;\n    const { isModalOpen, itemId } = this.state;\n\n    const modalImage = images?.find(image => image.id === Number(itemId));\n    const imageSrc = modalImage?.largeImageURL;\n    const imageTags = modalImage?.tags;\n\n    const galleryItems = images.map(({ id, webformatURL, tags }) => (\n      <ImageGalleryItem\n        key={id}\n        id={id}\n        src={webformatURL}\n        alt={tags}\n        onClick={this.handleItemClick}\n      />\n    ));\n\n    return (\n      <>\n        <ul className=\"ImageGallery\">{galleryItems}</ul>\n        {isModalOpen && <Modal onClose={this.toggleModal} src={imageSrc} alt={imageTags} />}\n      </>\n    );\n  }\n}\n\nImageGallery.propTypes = { images: PropTypes.array.isRequired };\n\nexport default ImageGallery;\n","import 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport ReactLoader from 'react-loader-spinner';\n\nconst Loader = props => {\n  return (\n    <ReactLoader\n      className=\"Loader\"\n      type=\"TailSpin\"\n      color=\"#303f9f\"\n      height={50}\n      width={50}\n      timeout={3000} //3 secs\n    />\n  );\n};\n\nexport default Loader;\n","import { Component } from 'react';\n\nclass SearchBar extends Component {\n  state = {\n    query: '',\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    const { query } = this.state;\n    const { onSubmit } = this.props;\n    const trimmedQuery = query.trim();\n\n    onSubmit(trimmedQuery);\n  };\n\n  handleChange = event => {\n    const { value } = event.target;\n    this.setState({ query: value });\n  };\n  // { onSubmit }fF\n  render() {\n    return (\n      <header className=\"Searchbar\" onSubmit={this.handleSubmit}>\n        <form className=\"SearchForm\">\n          <button type=\"submit\" className=\"SearchForm-button\">\n            <span className=\"SearchForm-button-label\">Search</span>\n          </button>\n\n          <input\n            className=\"SearchForm-input\"\n            type=\"text\"\n            onChange={this.handleChange}\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search images and photos\"\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nexport default SearchBar;\n","const BASE_URL = 'https://pixabay.com/api';\nconst KEY = '23157120-208317e5fddd4920b074585fd';\nconst PAGE_SIZE = 12;\n\nconst getImagesResponse = async (page, query) => {\n  try {\n    const url = `${BASE_URL}/?q=${query}&page=${page}&key=${KEY}&image_type=photo&orientation=horizontal&per_page=${PAGE_SIZE}`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      return Promise.reject(new Error(response.statusText));\n    }\n\n    const parsedData = await response.json();\n    return parsedData;\n  } catch (error) {\n    console.log('error', error);\n  }\n};\n\nexport { getImagesResponse as getImages };\n","import React, { Component } from 'react';\nimport Button from '../button';\nimport ImageGallery from '../image-gallery';\nimport Loader from '../loader';\nimport SearchBar from '../search-bar';\nimport { getImages } from '../../util/api-client';\n\nconst INITIAL_STATE = {\n  page: 1,\n  totalHits: 0,\n  query: '',\n  images: [],\n  error: '',\n  isLoading: false,\n};\n\nclass App extends Component {\n  state = {\n    ...INITIAL_STATE,\n  };\n\n  handleSearchFormSubmit = async query => {\n    if (this.state.query === query) return;\n\n    const firstPage = 1;\n\n    if (!query) {\n      this.setState({ ...INITIAL_STATE });\n      return;\n    }\n\n    this.setState({ isLoading: true });\n    const { hits, totalHits } = await getImages(firstPage, query);\n    this.setState({ ...INITIAL_STATE, query, totalHits, images: [...hits] });\n  };\n\n  handleLoadMoreButtonClick = async () => {\n    if (this.state.isLoading) return;\n    const { page, query } = this.state;\n    const nextPage = page + 1;\n\n    this.setState({ isLoading: true });\n\n    const { hits, totalHits } = await getImages(nextPage, query);\n\n    this.setState(prevState => {\n      return {\n        isLoading: false,\n        totalHits,\n        page: nextPage,\n        images: prevState.images.concat(hits),\n      };\n    });\n  };\n\n  render() {\n    const { images, totalHits, isLoading } = this.state;\n    const shouldShowLoadButton = images.length < totalHits;\n    return (\n      <div className=\"App\">\n        <SearchBar onSubmit={this.handleSearchFormSubmit} />\n        <ImageGallery images={images} />\n        {isLoading && <Loader />}\n        {shouldShowLoadButton && <Button onClick={this.handleLoadMoreButtonClick} />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.scss';\nimport App from './components/app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}